@inject IGenreApi genreApi
@inject IActorApi actorApi

<EditForm Model="Movie" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Title:</label>
        <InputText class="form-control" @bind-Value="Movie.Title"></InputText>
        <ValidationMessage For="@(() => Movie.Title)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Poster:</label>
        <InputText class="form-control mb-2" @bind-Value="Movie.Poster"></InputText>
        @if(!string.IsNullOrEmpty(Movie.Poster))
        {
            <img src="@Movie.Poster" alt="Poster Preview" style="width: 225px; height: 300px" />
        }
        else
        {
            <img src="https://www.genius100visions.com/wp-content/uploads/2017/09/placeholder-vertical.jpg" alt="Poster Preview" style="width: 225px; height: 300px" />
        }
        <ValidationMessage For="@(() => Movie.Poster)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Release Date:</label>
        <InputDate class="form-control" @bind-Value="Movie.ReleaseDate"></InputDate>
        <ValidationMessage For="@(() => Movie.ReleaseDate)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Genres:</label>
        <InputSelectMultiple Items="_genres" SelectedItems="Movie.Genres"  MapValue="(x => x.Id)" MapText="(x => x.Name)" ReturnSelectedValues="GetSelectedGenres" />
        <ValidationMessage For="@(() => Movie.Genres)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Actors:</label>
        <InputSelectMultiple Items="_actors" SelectedItems="Movie.Actors" MapValue="(x => x.Id)" MapText="@(x => $"{x.FirstName} {x.LastName}")" ReturnSelectedValues="GetSelectedActors" />
        <ValidationMessage For="@(() => Movie.Actors)" />
    </div>
    <div>
        <button type="submit" class="btn btn-success">Save</button>
    </div>
</EditForm>

@code {
    [Parameter] public MovieDto Movie { get; set; } = new();
    [Parameter] public List<GenreDto> Genres { get; set; }
    [Parameter] public List<ActorDto> Actors { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private List<GenreDto> _genres = new();
    private List<ActorDto> _actors = new();

    private void GetSelectedGenres(List<int> selectedGenres)
    {
        List<GenreDto> movieGenres = new();

        foreach (var id in selectedGenres)
        {
            var genre = _genres.Find(g => g.Id == id);

            if (genre is not null)
                movieGenres.Add(genre);
        }

        Movie.Genres = movieGenres;
    }

    private void GetSelectedActors(List<int> selectedActors)
    {
        List<ActorDto> movieActors = new();

        foreach (var id in selectedActors)
        {
            var actor = _actors.Find(a => a.Id == id);

            if (actor is not null)
                movieActors.Add(actor);
        }

        Movie.Actors = movieActors;
    }

    protected async override Task OnInitializedAsync()
    {
        _genres = Genres.Any() ? Genres : await genreApi.Get();
        _actors = Actors.Any() ? Actors : await actorApi.Get();
    }
}
